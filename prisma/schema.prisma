// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
enum Role {
  user
  admin
  superadmin
}

enum SubscriptionType {
  free
  premium
}

enum SubscriptionStatus {
  active
  expired
  canceled
  pending_payment
}

enum PaymentMethod {
  card
  paypal
  bank_transfer
  crypto
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum Quality {
  p240
  p360
  p480
  p720
  p1080
  k4
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  email        String     @unique
  passwordHash String
  role         Role       @default(user)
  avatarUrl    String?
  createdAt    DateTime   @default(now())
  profile      Profile?
  subscriptions UserSubscription[]
  favorites    Favorite[]
  reviews      Review[]
  watchHistory WatchHistory[]
  movies       Movie[]    @relation("CreatedMovies")
}

model Profile {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  fullName  String
  phone     String
  country   String
  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id            String              @id @default(uuid())
  name          String
  price         Decimal
  durationDays  Int
  features      Json
  isActive      Boolean             @default(true)
  subscriptions UserSubscription[]
}

model UserSubscription {
  id         String           @id @default(uuid())
  user       User             @relation(fields: [userId], references: [id])
  userId     String
  plan       SubscriptionPlan @relation(fields: [planId], references: [id])
  planId     String
  startDate  DateTime         @default(now())
  endDate    DateTime
  status     SubscriptionStatus @default(pending_payment)
  autoRenew  Boolean           @default(false)
  createdAt  DateTime          @default(now())
  payments   Payment[]
}

model Payment {
  id                   String         @id @default(uuid())
  userSubscription     UserSubscription @relation(fields: [userSubscriptionId], references: [id])
  userSubscriptionId   String
  amount               Decimal
  paymentMethod        PaymentMethod
  paymentDetails       Json
  status               PaymentStatus
  externalTransactionId String
  createdAt            DateTime       @default(now())
}

model Category {
  id          String          @id @default(uuid())
  name        String
  slug        String          @unique
  description String?
  movieLinks  MovieCategory[]
}

model Movie {
  id              String          @id @default(uuid())
  title           String
  slug            String          @unique
  description     String
  releaseYear     Int
  durationMinutes Int
  posterUrl       String
  rating          Decimal
  subscriptionType SubscriptionType @default(free)
  viewCount       Int              @default(0)
  createdBy       User             @relation("CreatedMovies", fields: [createdById], references: [id])
  createdById     String
  createdAt       DateTime         @default(now())
  categories      MovieCategory[]
  files           MovieFile[]
  favorites       Favorite[]
  reviews         Review[]
  watchHistory    WatchHistory[]
}

model MovieCategory {
  id         String   @id @default(uuid())
  movie      Movie    @relation(fields: [movieId], references: [id])
  movieId    String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String
}

model MovieFile {
  id        String   @id @default(uuid())
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  fileUrl   String
  quality   Quality
  language  String   @default("uz")
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  movie     Movie    @relation(fields: [movieId], references: [id])
  movieId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  
}

model WatchHistory {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  movie            Movie    @relation(fields: [movieId], references: [id])
  movieId          String
  watchedDuration  Int
  watchedPercentage Decimal
  lastWatched      DateTime @default(now())
}